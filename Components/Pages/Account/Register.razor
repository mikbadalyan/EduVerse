@page "/register"
@using EduVerse.Components.Layout
@using EduVerse.ViewModels
@using EduVerse.Data
@using EduVerse.Services
@using BCrypt.Net
@using Microsoft.EntityFrameworkCore

@inject NavigationManager Navigation
@inject AccountService AccountService
@inject AppDbContext AppDbContext
@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<div class="account-container">
    <div class="account-box">
        <h2 class="text-center mb-4">Register</h2>
        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="Name" class="form-label">Name</label>
                <InputText id="Name" class="form-control" @bind-Value="RegisterModel.Name" />
                <ValidationMessage For="@(() => RegisterModel.Name)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Email" class="form-label">Email</label>
                <InputText id="Email" class="form-control" @bind-Value="RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="Password" class="form-label">Password</label>
                <InputText id="Password" class="form-control" type="password" @bind-Value="RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="ConfirmPassword" class="form-label">Confirm Password</label>
                <InputText id="ConfirmPassword" class="form-control" type="password" @bind-Value="RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-success w-100 p-2">Register</button>

            <p class="text-center mt-2">
                Already have an account?
                <a class="text-decoration-none" @onclick="NavigateToLogin">Login</a>
            </p>
            <div class="text-center">
                <a class="text-decoration-none mt-3" @onclick="NavigateToHome">Back</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private RegisterViewModel RegisterModel = new();

    private string? ErrorMessage;

    private async Task HandleRegister()
    {
        var result = await RegisterAsync(RegisterModel);
        if (result.IsSuccess)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = string.Join(", ", result.Errors);
        }
    }

    private async Task<(bool IsSuccess, IEnumerable<string> Errors)> RegisterAsync(RegisterViewModel model)
    {
        var errors = new List<string>();

        // Check if the user already exists
        if (await AppDbContext.Users.AnyAsync(u => u.Email == model.Email))
        {
            errors.Add("Email is already registered.");
            return (false, errors);
        }

        // Hash the password
        var passwordHash = BCrypt.HashPassword(model.Password);

        // Create a new user
        var user = new User
        {
            Name = model.Name,
            Email = model.Email,
            PasswordHash = passwordHash,
        };

        // Save to the database
        try
        {
            AppDbContext.Users.Add(user);
            await AppDbContext.SaveChangesAsync();
            return (true, Enumerable.Empty<string>());
        }
        catch (Exception ex)
        {
            errors.Add($"Error saving user: {ex.Message}");
            return (false, errors);
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }
}
