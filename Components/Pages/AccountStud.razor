@page "/acc"
@using EduVerse.Components.Layout
@using EduVerse.Data
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer
@layout AccountLayout
@using Microsoft.AspNetCore.Components

<style>
    body {
        background-color: #1C375B;
    }

    .filter-options {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 20px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

        .filter-options label {
            margin-right: 10px;
            font-weight: bold;
        }

        .filter-options select,
        .filter-options input {
            padding: 5px;
            border: 1px solid #ced4da;
            border-radius: 5px;
        }

    .clickable-box {
        width: 50px;
        height: 400px;
        margin: 10px;
        padding: 10px;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        cursor: pointer;
    }

    .clickable-boxes {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .date-box {
        margin-bottom: 20px;
    }

    .date-footer {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 10px;
        width: 100%;
    }

        .date-footer::before,
        .date-footer::after {
            content: "";
            flex: 1;
            border-bottom: 1px solid #000;
            margin: 0 10px;
        }

    .subject-name {
        text-align: center;
        margin-top: 5px;
    }
</style>

<div class="filter-options">
    <label for="subjectFilter">Filter by Subject:</label>
    <select id="subjectFilter" @onchange="OnSubjectFilterChanged">
        <option value="">All Subjects</option>
        @foreach (var subject in subjects)
        {
            <option value="@subject">@subject</option>
        }
    </select>

    <label for="lessonNumberFilter">Filter by Lesson Number:</label>
    <input type="number" id="lessonNumberFilter" @oninput="OnLessonNumberFilterChanged" />

    <label for="statusFilter">Filter by Status:</label>
    <select id="statusFilter" @onchange="OnStatusFilterChanged">
        <option value="">All Statuses</option>
        <option value="Done">Done</option>
        <option value="In Progress">In Progress</option>
        <option value="I Have Difficulty">I Have Difficulty</option>
        <option value="Not Done">Not Done</option>
        <option value="Locked">Locked</option>
        <option value="Unlocked">Unlocked</option>
    </select>

    <label for="dateFilter">Filter by Date:</label>
    <input type="date" id="dateFilter" @oninput="OnDateFilterChanged" />

    <label for="pathnameFilter">Filter by Pathname:</label>
    <input type="text" id="pathnameFilter" @oninput="OnPathnameFilterChanged" />
</div>


<div class="date-boxes" id="date-boxes">
    @foreach (var date in dates)
    {
        var entities = filteredEntities.Where(e => e.Date.Date == date.Date).ToList();
        if (entities.Any())
        {
            <div class="date-box" id="date-@date.ToString("yyyyMMdd")">
                <div class="clickable-boxes">
                    @foreach (var entity in entities.Select((value, index) => new { value, index }))
                    {
                        <div class="clickable-box" style="background-color:@(GetColor(entity.value.Color));" @onclick="() => ShowDetails(entity.value)">
                            <p>@entity.value.Topic</p>
                            <p>@entity.value.LessonType</p>
                        </div>
                        <div class="subject-name">@entity.value.Name</div>
                    }
                </div>
                <div class="date-footer">@date.ToString("MM.dd.yyyy")</div>
            </div>
        }
    }
</div>
@if (selectedEntity != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetails"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Name:</strong> @selectedEntity.Name</p>
                    <p><strong>Topic:</strong> @selectedEntity.Topic</p>
                    <p><strong>Lesson:</strong> @selectedEntity.Lesson</p>
                    <p><strong>Coin:</strong> @selectedEntity.Coin</p>
                    <p><strong>Lesson Type:</strong> @selectedEntity.LessonType</p>
                    <p><strong>Date:</strong> @selectedEntity.Date.ToShortDateString()</p>
                    <p><strong>Status:</strong> @selectedEntity.Status</p>
                    <div>
                        <button class="btn btn-secondary" @onclick="@(async () => await UpdateStatus("Not Done"))">Not Done</button>
                        <button class="btn btn-secondary" @onclick="@(async () => await UpdateStatus("In Progress"))">In Progress</button>
                        <button class="btn btn-secondary" @onclick="@(async () => await UpdateStatus("Done"))">Done</button>
                        <button class="btn btn-secondary" @onclick="@(async () => await UpdateStatus("I Have Difficulty"))">I Have Difficulty</button>
                    </div>
                    @if (selectedEntity.PdfLink != null && selectedEntity.PdfLink.Length > 0)
                    {
                        <div class="mt-3">
                            <h6>PDF Resource</h6>
                            <button class="btn btn-primary" @onclick="@(async () => await ViewPDF(selectedEntity))">View PDF</button>
                        </div>
                    }
                    <div class="mt-3">
                        <h6>Pinned Resources</h6>
                        <ul>
                            @foreach (var resource in selectedEntity.Resources)
                            {
                                <li>@resource</li>
                            }
                        </ul>
                    </div>
                    <div class="mt-3">
                        <h6>Tasks</h6>
                        <ul>
                            @foreach (var task in selectedEntity.Tasks)
                            {
                                <li>@task</li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<NewEntity> newEntities = new();
    private List<NewEntity> filteredEntities = new();
    private List<DateTime> dates = new()
    {
        new DateTime(2024, 12, 21),
        new DateTime(2024, 12, 22),
        new DateTime(2024, 12, 23),
        new DateTime(2024, 12, 24),
        new DateTime(2024, 12, 25),
        new DateTime(2024, 12, 26),
        new DateTime(2024, 12, 27),
        new DateTime(2024, 12, 28),
        new DateTime(2024, 12, 29),
        new DateTime(2024, 12, 30),
        new DateTime(2024, 12, 31)
    };

    private NewEntity? selectedEntity; // Make selectedEntity nullable
    private List<string> subjects = new();
    private List<string> lessonTypes = new();

    private string subjectFilter = string.Empty;
    private int? lessonNumberFilter = null;
    private string statusFilter = string.Empty;
    private DateTime? dateFilter = null;
    private string pathnameFilter = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userId = await JSRuntime.InvokeAsync<string>("prompt", "Please enter your User ID:");
            if (string.IsNullOrWhiteSpace(userId))
            {
                Navigation.NavigateTo("/");
                return;
            }

            await RegisterUser(userId);

            newEntities = await DbContext.NewEntities.Where(e => e.UserId == userId).ToListAsync();
            filteredEntities = newEntities;

            subjects = newEntities.Select(e => e.Name).Distinct().ToList();
            lessonTypes = newEntities.Select(e => e.LessonType).Distinct().ToList();

            var currentDate = DateTime.Now.Date;
            var currentBoxId = $"date-{currentDate:yyyyMMdd}";
            await JSRuntime.InvokeVoidAsync("scrollToElement", currentBoxId);

            StateHasChanged();
        }
    }

    private void FilterEntities()
    {
        filteredEntities = newEntities
            .Where(e => (string.IsNullOrEmpty(subjectFilter) || e.Name == subjectFilter) &&
                        (!lessonNumberFilter.HasValue || e.Lesson == lessonNumberFilter.Value) &&
                        (string.IsNullOrEmpty(statusFilter) || e.Status == statusFilter) &&
                        (!dateFilter.HasValue || e.Date.Date == dateFilter.Value.Date) &&
                        (string.IsNullOrEmpty(pathnameFilter) || e.PathName.Contains(pathnameFilter, StringComparison.OrdinalIgnoreCase)))
            .ToList();

        StateHasChanged();
    }

    private void OnSubjectFilterChanged(ChangeEventArgs e)
    {
        subjectFilter = e.Value?.ToString() ?? string.Empty;
        FilterEntities();
    }

    private void OnLessonNumberFilterChanged(ChangeEventArgs e)
    {
        lessonNumberFilter = int.TryParse(e.Value?.ToString(), out var lessonNumber) ? lessonNumber : (int?)null;
        FilterEntities();
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString() ?? string.Empty;
        FilterEntities();
    }

    private void OnDateFilterChanged(ChangeEventArgs e)
    {
        dateFilter = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : (DateTime?)null;
        FilterEntities();
    }

    private void OnPathnameFilterChanged(ChangeEventArgs e)
    {
        pathnameFilter = e.Value?.ToString() ?? string.Empty;
        FilterEntities();
    }

    private void ShowDetails(NewEntity entity)
    {
        selectedEntity = entity;
        selectedEntity.Resources = DbContext.TextEntries
            .Where(te => te.Name == entity.Name && te.Topic == entity.Topic)
            .Select(te => te.Resources_link)
            .ToList();
        selectedEntity.Tasks = DbContext.TextEntries
            .Where(te => te.Name == entity.Name && te.Topic == entity.Topic)
            .Select(te => te.Tasks)
            .ToList();
    }

    private void CloseDetails()
    {
        selectedEntity = null;
    }

    private async Task UpdateStatus(string status)
    {
        if (selectedEntity != null)
        {
            selectedEntity.Status = status;
            selectedEntity.Color = status switch
            {
                "Done" => "green",
                "In Progress" => "yellow",
                "I Have Difficulty" => "red",
                "Not Done" => "grey",
                _ => "grey"
            };

            if (status == "Done")
            {
                var user = await DbContext.StudUsers.FirstOrDefaultAsync(u => u.UserId == selectedEntity.UserId);
                if (user != null)
                {
                    user.Coin += selectedEntity.Coin;
                    DbContext.StudUsers.Update(user);
                }

                // Check for dependencies and update their status
                var dependencies = await DbContext.Dependencies
                    .Where(d => d.SubjectId == selectedEntity.SubjectId)
                    .ToListAsync();

                foreach (var dependency in dependencies)
                {
                    var dependentSubjects = new List<int?> { dependency.Depend1, dependency.Depend2, dependency.Depend3, dependency.Depend4, dependency.Depend5 };
                    foreach (var dependentSubjectId in dependentSubjects)
                    {
                        if (dependentSubjectId.HasValue)
                        {
                            var dependentEntity = await DbContext.NewEntities
                                .FirstOrDefaultAsync(e => e.SubjectId == dependentSubjectId.Value && e.UserId == selectedEntity.UserId);

                            if (dependentEntity != null && dependentEntity.Status == "Locked")
                            {
                                dependentEntity.Status = "Unlocked";
                                DbContext.NewEntities.Update(dependentEntity);
                            }
                        }
                    }
                }

                // Increment the value of the rectangle for today's date
                var today = DateTime.Today;
                var rectangle = await DbContext.RectangleStatuses.FirstOrDefaultAsync(r => r.Date == today);
                if (rectangle != null)
                {
                    rectangle.Value += 1;
                    DbContext.RectangleStatuses.Update(rectangle);
                }
            }

            DbContext.NewEntities.Update(selectedEntity);
            await DbContext.SaveChangesAsync();
            StateHasChanged(); // Ensure the component re-renders
        }
    }


    private async Task ViewPDF(NewEntity entity)
    {
        if (entity.PdfLink != null)
        {
            var base64PDF = Convert.ToBase64String(entity.PdfLink);
            var pdfData = $"data:application/pdf;base64,{base64PDF}";
            await JSRuntime.InvokeVoidAsync("viewPDF", pdfData);
        }
    }

    private async Task RegisterUser(string userId)
    {
        var userExists = await DbContext.StudUsers.AnyAsync(u => u.UserId == userId);
        if (!userExists)
        {
            // Register the new user
            DbContext.StudUsers.Add(new StudUser { UserId = userId });

            // Add text entries for the new user
            var textEntries = await DbContext.TextEntries.ToListAsync();
            var newEntities = textEntries.Select(te => new NewEntity
                {
                    Name = te.Name,
                    Topic = te.Topic,
                    Lesson = te.Lesson,
                    Coin = te.Reward_coin,
                    LessonType = te.Lesson_type,
                    Date = te.Date, // Use the date from TextEntries
                    PathName = te.Pathname,
                    Status = te.Lesson > 1 ? "Locked" : "Unlocked",
                    Color = "grey", // Set default color to grey
                    UserId = userId,
                    PdfLink = te.PDF, // Store the PDF as a byte array
                    SubjectId = te.Id // Add SubjectId
                }).ToList();

            DbContext.NewEntities.AddRange(newEntities);
            await DbContext.SaveChangesAsync();
        }
        else
        {
            // Check for new text entries and add them for the existing user
            var existingEntities = await DbContext.NewEntities.Where(e => e.UserId == userId).ToListAsync();
            var textEntries = await DbContext.TextEntries.ToListAsync();

            var newEntities = textEntries
                .Where(te => !existingEntities.Any(ee => ee.Name == te.Name && ee.Topic == te.Topic))
                .Select(te => new NewEntity
                    {
                        Name = te.Name,
                        Topic = te.Topic,
                        Lesson = te.Lesson,
                        Coin = te.Reward_coin,
                        LessonType = te.Lesson_type,
                        Date = te.Date, // Use the date from TextEntries
                        PathName = te.Pathname,
                        Status = te.Lesson > 1 ? "Locked" : "Unlocked",
                        Color = "grey", // Set default color to grey
                        UserId = userId,
                        PdfLink = te.PDF, // Store the PDF as a byte array
                        SubjectId = te.Id // Add SubjectId
                    }).ToList();

            if (newEntities.Any())
            {
                DbContext.NewEntities.AddRange(newEntities);
                await DbContext.SaveChangesAsync();
            }
        }
    }

    private string GetColor(string color)
    {
        return color switch
        {
            "red" => "#ee6c4d",
            "yellow" => "#F5DA55",
            "green" => "#92E3A9",
            "grey" => "#D3D3D3",
            _ => color
        };
    }
}



<script>
    function viewPDF(pdfData) {
        var win = window.open();
        win.document.write('<iframe src="' + pdfData + '" frameborder="0" style="border:0; top:0; left:0; bottom:0; right:0; width:100%; height:100%;" allowfullscreen></iframe>');
    }
</script>
