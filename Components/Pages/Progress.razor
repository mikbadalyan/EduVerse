@page "/progress"
@using EduVerse.Components.Layout
@using EduVerse.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inherits LayoutComponentBase
@inject EduVerse.Data.AppDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<AccountLayout> Logger
@rendermode InteractiveServer

<style>
    body {
        background-color: #1C375B;
    }

    header, footer {
        background-color: #1C375B;
        color: white;
        padding: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .nav-links {
        display: flex;
        justify-content: center;
        flex-grow: 1;
    }

        .nav-links a {
            margin: 0 15px;
            color: white;
            text-decoration: none;
        }

    .account-info {
        display: flex;
        align-items: center;
    }

        .account-info img {
            border-radius: 50%;
            margin-right: 10px;
        }

    .subject-box {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        margin: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .subject-box h3 {
            margin-bottom: 10px;
        }

    .see-more-button {
        background-color: green;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .subject-boxes {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .contribution-table {
        display: grid;
        grid-template-columns: repeat(52, 1fr);
        gap: 2px;
        margin: 20px 0;
    }

    .contribution-cell {
        width: 20px;
        height: 20px;
        background-color: #ebedf0;
    }

        .contribution-cell.level-1 {
            background-color: #c6e48b;
        }

        .contribution-cell.level-2 {
            background-color: #7bc96f;
        }

        .contribution-cell.level-3 {
            background-color: #239a3b;
        }

        .contribution-cell.level-4 {
            background-color: #196127;
        }

    .months {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .month {
        width: calc(100% / 12);
        text-align: center;
        color: white;
    }
</style>

<div class="account-layout">
    <header>
        <img src="logo.png" alt="Logo" style="height: 40px;">
        <nav class="nav-links">
            <a href="/home">Home</a>
            <a href="/acc">Dashboard</a>
            <a href="/courses">Courses</a>
            <a href="/pathways">Pathways</a>
            <a href="/progress">Progress Tracker</a>
        </nav>
        <div class="account-info">
            <img src="avatar.jpg" alt="Account Image" style="height: 40px;">
            <p>@userName</p>
        </div>
    </header>
    <main>
        <div class="subject-boxes">
            @foreach (var pathway in pathways)
            {
                <div class="subject-box">
                    <h3>@pathway</h3>
                    <button class="see-more-button" @onclick="() => NavigateToDashboard()">Go to Dashboard</button>
                </div>
            }
        </div>
        <div class="months">
            <div class="month">Jan</div>
            <div class="month">Feb</div>
            <div class="month">Mar</div>
            <div class="month">Apr</div>
            <div class="month">May</div>
            <div class="month">Jun</div>
            <div class="month">Jul</div>
            <div class="month">Aug</div>
            <div class="month">Sep</div>
            <div class="month">Oct</div>
            <div class="month">Nov</div>
            <div class="month">Dec</div>
        </div>
        <div class="contribution-table">
            @foreach (var week in contributionData)
            {
                @foreach (var day in week)
                {
                    <div class="contribution-cell @GetLevelClass(day.Value)" title="@day.Date.ToShortDateString() - @day.Value"></div>
                }
            }
        </div>
        @Body
    </main>
    <footer>
        <!-- Footer content -->
    </footer>
</div>

@code {
    private string userName = "Guest";
    private List<string> pathways = new List<string>();
    private List<List<RectangleStatus>> contributionData = new List<List<RectangleStatus>>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirst(c => c.Type == "sub")?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    var studUser = DbContext.StudUsers.FirstOrDefault(u => u.UserId == userId);
                    if (studUser != null)
                    {
                        userName = $"{studUser.Name} {studUser.Surname}";
                    }
                }
            }

            pathways = await DbContext.TextEntries
                .Where(te => !string.IsNullOrEmpty(te.Pathname))
                .Select(te => te.Pathname)
                .Distinct()
                .ToListAsync();

            if (pathways == null || !pathways.Any())
            {
                Logger.LogWarning("No pathways found in the database.");
            }

            // Load contribution data from the database
            await LoadContributionData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while initializing the component.");
        }
    }

    private void NavigateToDashboard()
    {
        // Implement navigation logic to the dashboard here
    }

    private async Task LoadContributionData()
    {
        var data = await DbContext.RectangleStatuses
            .OrderBy(rs => rs.Date)
            .ToListAsync();

        var startDate = new DateTime(2024, 1, 1);
        var endDate = new DateTime(2024, 12, 31);
        var totalDays = (endDate - startDate).Days + 1;

        for (int i = 0; i < totalDays; i += 7) // 7 days a week
        {
            var week = new List<RectangleStatus>();
            for (int j = 0; j < 7; j++)
            {
                var date = startDate.AddDays(i + j);
                var status = data.FirstOrDefault(rs => rs.Date.Date == date.Date) ?? new RectangleStatus { Date = date, Value = 0 };
                week.Add(status);
            }
            contributionData.Add(week);
        }
    }

    private string GetLevelClass(int value)
    {
        if (value >= 10) return "level-4";
        if (value >= 7) return "level-3";
        if (value >= 4) return "level-2";
        if (value >= 1) return "level-1";
        return "";
    }

    private async Task UpdateRectangleStatus(RectangleStatus status)
    {
        status.Value = Math.Min(status.Value + 1, 10);
        DbContext.RectangleStatuses.Update(status);
        await DbContext.SaveChangesAsync();
    }
}
