@page "/courses"
@using EduVerse.Components.Layout
@using EduVerse.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inherits LayoutComponentBase
@inject EduVerse.Data.AppDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<AccountLayout> Logger
@rendermode InteractiveServer
<style>
    body {
        background-color: #1C375B;
    }

    header, footer {
        background-color: #1C375B;
        color: white;
        padding: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .nav-links {
        display: flex;
        justify-content: center;
        flex-grow: 1;
    }

        .nav-links a {
            margin: 0 15px;
            color: white;
            text-decoration: none;
        }

    .account-info {
        display: flex;
        align-items: center;
    }

        .account-info img {
            border-radius: 50%;
            margin-right: 10px;
        }

    .subject-box {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        margin: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .subject-box h3 {
            margin-bottom: 10px;
        }

    .see-more-button {
        background-color: green;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .subject-boxes {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .modal {
        display: block;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        outline: 0;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-dialog {
        position: relative;
        width: auto;
        margin: 10px;
        pointer-events: none;
    }

    .modal-content {
        position: relative;
        display: flex;
        flex-direction: column;
        width: 100%;
        pointer-events: auto;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid rgba(0, 0, 0, 0.2);
        border-radius: 0.3rem;
        outline: 0;
    }

    .modal-header {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        border-top-left-radius: 0.3rem;
        border-top-right-radius: 0.3rem;
    }

    .modal-body {
        position: relative;
        flex: 1 1 auto;
        padding: 1rem;
    }

    .modal-footer {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
    }
</style>

<div class="account-layout">
    <header>
        <img src="logo.png" alt="Logo" style="height: 40px;">
        <nav class="nav-links">
            <a href="/home">Home</a>
            <a href="/acc">Dashboard</a>
            <a href="/courses">Courses</a>
            <a href="/pathways">Pathways</a>
            <a href="/progress">Progress Tracker</a>
        </nav>
        <div class="account-info">
            <img src="avatar.jpg" alt="Account Image" style="height: 40px;">
            <p>@userName</p>
        </div>
    </header>
    <main>
        <div class="subject-boxes">
            @foreach (var subject in subjects)
            {
                <div class="subject-box">
                    <h3>@subject</h3>
                    <button class="see-more-button" @onclick="() => NavigateToSubject(subject)">See more</button>
                </div>
            }
        </div>
        @Body
    </main>
    <footer>
        <!-- Footer content -->
    </footer>
</div>

@if (showModal)
{
    <div class="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedSubject</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <h6>Topics</h6>
                    <ul>
                        @foreach (var entry in selectedEntries)
                        {
                            <li>@entry.Topic</li>
                        }
                    </ul>
                    <h6>Resources</h6>
                    <ul>
                        @foreach (var entry in selectedEntries)
                        {
                            @foreach (var resource in entry.Resources_link)
                            {
                                <li>@resource</li>
                            }
                        }
                    </ul>
                    <h6>Tasks</h6>
                    <ul>
                        @foreach (var entry in selectedEntries)
                        {
                            @foreach (var task in entry.Tasks)
                            {
                                <li>@task</li>
                            }
                        }
                    </ul>
                    <h6>Information</h6>
                    <ul>
                        @foreach (var entry in selectedEntries)
                        {
                            <li><strong>Name:</strong> @entry.Name</li>
                            <li><strong>Lesson:</strong> @entry.Lesson</li>
                            <li><strong>Coin:</strong> @entry.Reward_coin</li>
                            <li><strong>Lesson Type:</strong> @entry.Lesson_type</li>
                            <li><strong>Date:</strong> @entry.Date.ToShortDateString()</li>
                         
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string userName = "Guest";
    private List<string> subjects = new List<string>();
    private bool showModal = false;
    private string selectedSubject = string.Empty;
    private List<TextEntry> selectedEntries = new List<TextEntry>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirst(c => c.Type == "sub")?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    var studUser = DbContext.StudUsers.FirstOrDefault(u => u.UserId == userId);
                    if (studUser != null)
                    {
                        userName = $"{studUser.Name} {studUser.Surname}";
                    }
                }
            }

            subjects = await DbContext.TextEntries
                .Where(te => !string.IsNullOrEmpty(te.Name))
                .Select(te => te.Name)
                .Distinct()
                .ToListAsync();

            if (subjects == null || !subjects.Any())
            {
                Logger.LogWarning("No subjects found in the database.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while initializing the component.");
        }
    }

    private async Task NavigateToSubject(string subject)
    {
        selectedSubject = subject;
        selectedEntries = await DbContext.TextEntries
            .Where(te => te.Name == subject)
            .ToListAsync();
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }
}
