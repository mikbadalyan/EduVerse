@using Microsoft.AspNetCore.Components.Forms
@inject AppDbContext DbContext
@inject NavigationManager Navigation

<div class="modal" tabindex="-1" style="display:@(IsVisible ? "block" : "none");">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick:stopPropagation @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="EditValue" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="editInput">@Title</label>
                        <InputText id="editInput" class="form-control" @bind-Value="EditValue" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick:stopPropagation @onclick="CloseModal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string EditValue { get; set; }

    [Parameter]
    public EventCallback<string> OnSave { get; set; }

    public bool IsVisible { get; set; } = false;

    public void ShowModal()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseModal()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(EditValue);
        CloseModal();
    }
}

